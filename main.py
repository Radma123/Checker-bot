from bs4 import BeautifulSoup
import lxml
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import telebot
import sqlite3
import re
from setup import variables
import time
import threading
import random
import logging

logging.basicConfig(
    level=logging.WARNING,
    filename = "setup/mylog.log",
    format = "%(asctime)s - %(module)s - %(levelname)s - %(funcName)s: %(lineno)d - %(message)s",
    datefmt='%H:%M:%S',
    )
logging.warning('________________________________HELLO__________________________________')


api_key = variables.tg_api
bot = telebot.TeleBot(token = api_key, parse_mode='HTML')

conn = sqlite3.connect('setup/mydatabase.db', check_same_thread=False)
cursor = conn.cursor()

user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36'

def product_sender(chat_id, title, href, img_src, price):
    text = f'{title}\n\n<b><u>–¶–µ–Ω–∞:</u></b> {price}\n\n{href}'

    if img_src is not None:
        bot.send_photo(chat_id=chat_id, photo=img_src, caption=text)
    else:
        bot.send_message(chat_id=chat_id, text=text)
        
        

def search_for_updates(chat_id, url): #–≤—ã–¥–∞–µ—Ç –∞–ø–¥–µ–π—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    chrome_options = Options()
    chrome_options.add_argument(f'user-agent={user_agent}')
    chrome_options.add_argument('--headless')  # –ó–∞–ø—É—Å–∫ –≤ –±–µ–∑–≥–æ–ª–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    driver = webdriver.Chrome(options=chrome_options)

    driver.get(url)
    

    html = driver.page_source
    # with open('1out.html',encoding='utf-8') as f:
    #     html = f.read()
    soup = BeautifulSoup(html, 'lxml')
    products = soup.find('div', class_= re.compile(r'^items-items')).find_all('div', class_=re.compile(r"iva-item-root"))
    

    for product in products:
        link_element = product.find('a', class_=re.compile(r"^iva-item-sliderLink"))

        title = link_element.get('title')
        href = 'https://www.avito.ru'+link_element.get('href')

        try:
            img_src = link_element.find('img').get('src')
        except:
            img_src = None # –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏
        price = product.find('div', class_=re.compile(r"price-price")).find('span').text.replace('\xa0', ' ')


        
        
        cursor.execute("SELECT items_url FROM activity WHERE chat_id = ? AND search_url = ?", (chat_id, url))
        current_urls = cursor.fetchone()

        if current_urls[0] != None:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–µ —Å—Å—ã–ª–∫–∏ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
            updated_urls = current_urls[0]
            if href not in updated_urls:
                updated_urls += ',' + href
                cursor.execute("UPDATE activity SET items_url = ? WHERE chat_id = ? AND search_url = ?", (updated_urls, chat_id, url))
                conn.commit()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                product_sender(chat_id, title, href, img_src, price)
        else:
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë —Å –ø–µ—Ä–≤–æ–π —Å—Å—ã–ª–∫–æ–π
            cursor.execute("UPDATE activity SET items_url = ? WHERE chat_id = ? AND search_url = ?", (href, chat_id, url))
            conn.commit()

            product_sender(chat_id, title, href, img_src, price)
                   



# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é
commands = [
    telebot.types.BotCommand("/donate", "–î–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é‚ù§Ô∏è"),
    telebot.types.BotCommand("/searches", "–ú–æ–∏ –ø–æ–∏—Å–∫–∏"),
    telebot.types.BotCommand("/help", "–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É")
]
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
bot.set_my_commands(commands)


@bot.message_handler(content_types=['text'])
def main(message):
    if message.text == '/start':
        bot.send_message(chat_id=message.from_user.id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ url —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤–∏—Ç–æ —Å —É–∂–µ –≤—ã—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ <u><b>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–∞—Ç–µ</b></u>.')

    elif message.text == '/help':
        bot.send_message(chat_id=message.from_user.id, text='–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ url —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤–∏—Ç–æ —Å —É–∂–µ –≤—ã—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ <u><b>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–∞—Ç–µ</b></u>.')
    
    elif message.text == '/donate':
        bot.send_message(chat_id=message.from_user.id, text=f'<u><b>–°–º–æ—Ç–∏–≤–∏—Ä—É–π –º–µ–Ω—è‚ù§Ô∏è</b></u>\n\n–°–±–µ—Ä–±–∞–Ω–∫\n<code>{variables.card}</code>\n\nUSDT-TON\n<code>{variables.usdt_ton}</code>\n\nHMSTR-coin\n<code>{variables.hmstr}</code>')
    
    elif message.text == '/searches':
        markup = telebot.types.InlineKeyboardMarkup(row_width=5)
        message_text = ''
        k=1
        for url_perebor_1 in cursor.execute(f"SELECT rowid, search_url FROM activity WHERE chat_id=?", (message.chat.id,)):
            message_text += f'{k}. {url_perebor_1[1]}\n\n'
            markup.add(telebot.types.InlineKeyboardButton(text=f'üóëÔ∏è{k}', callback_data=f'del_{url_perebor_1[0]} {k}'))
            k+=1

        if k==1:
            bot.send_message(chat_id=message.chat.id, text= '<u><b>–ü–æ–∏—Å–∫–æ–≤ –Ω–µ—Ç</b></u>\n\n')
        else:
            bot.send_message(chat_id=message.chat.id, text= '<u><b>–°—Ç–∞—Ç—É—Å:</b></u>\n\n'+message_text, reply_markup=markup)
        
    
    elif message.text.startswith('https://www.avito.ru/'):

        if len([i for i in cursor.execute("SELECT search_url FROM activity WHERE chat_id = ?", (message.chat.id,))]) == 2:
            bot.send_message(chat_id=message.from_user.id, text='–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ = 2')
        else:
            cursor.execute("SELECT * FROM activity WHERE search_url=? and chat_id=?", (message.text, message.chat.id))
            
            # –ï—Å–ª–∏ URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if cursor.fetchone() is None:
                cursor.execute("INSERT INTO activity (chat_id, search_url) VALUES (?, ?)", (message.from_user.id, message.text))
                conn.commit()  # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

                search_count = cursor.execute("SELECT * FROM activity WHERE chat_id=?", (message.from_user.id,))
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(telebot.types.InlineKeyboardButton(text=f'üîç–í—Å–µ–≥–æ {len([1 for _ in search_count])} –≤ –ø–æ–∏—Å–∫–µ', callback_data='search_count'))
                bot.send_message(chat_id=message.from_user.id, text='‚úÖ–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–∏—Å–∫',reply_markup=markup)
            else:
                search_count = cursor.execute("SELECT * FROM activity WHERE chat_id=?", (message.from_user.id,))
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(telebot.types.InlineKeyboardButton(text=f'üîç–í—Å–µ–≥–æ {len([1 for _ in search_count])} –≤ –ø–æ–∏—Å–∫–µ', callback_data='search_count'))
                bot.send_message(chat_id=message.from_user.id, text='‚ùå–£–∂–µ –≤ –ø–æ–∏—Å–∫–µ',reply_markup=markup)

        
@bot.callback_query_handler(func=lambda call: True)
def answer(call:telebot.types.CallbackQuery):
    if call.data =='search_count':
        markup = telebot.types.InlineKeyboardMarkup(row_width=5)
        message_text = ''
        k=1
        for url_perebor_1 in cursor.execute(f"SELECT rowid, search_url FROM activity WHERE chat_id=?", (call.message.chat.id,)):
            message_text += f'{k}. {url_perebor_1[1]}\n\n'
            markup.add(telebot.types.InlineKeyboardButton(text=f'üóëÔ∏è{k}', callback_data=f'del_{url_perebor_1[0]} {k}'))
            k+=1
        
        bot.send_message(chat_id=call.message.chat.id, text= '<u><b>–°—Ç–∞—Ç—É—Å:</b></u>\n\n'+message_text, reply_markup=markup)
        bot.answer_callback_query(call.id)

    elif call.data.startswith('del_'):
        cursor.execute("DELETE FROM activity WHERE rowid=?", (call.data.split()[0].replace('del_', ''),))
        conn.commit()

        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(chat_id=call.message.chat.id, text=f'–ü–æ–∏—Å–∫ "{call.data.split()[1]}" —É–¥–∞–ª–µ–Ω')
        bot.answer_callback_query(call.id)
        
        
def process_feed():
    while True:
        time.sleep(variables.db_update_time)

        urls_for_search = cursor.execute("SELECT chat_id, search_url FROM activity WHERE search_url IS NOT NULL")
        rows = cursor.fetchall()

        if len(rows) > 0:

            united_time_for_updates = variables.united_time_for_updates

            random.shuffle(rows)

            for chat_id, search_url in rows:
                if cursor.execute(f"SELECT search_url FROM activity WHERE chat_id=? and search_url=?", (chat_id, search_url)).fetchone() != None:
                    search_for_updates(chat_id, search_url)
                    time.sleep(united_time_for_updates)
        


if __name__ == '__main__':
    try:
        thread = threading.Thread(target=process_feed, daemon=True)
        thread.start()
        bot.polling(none_stop=True, skip_pending=True)
    except Exception as err:
        logging.exception(str(err))
        print('??????????????????___Fatal error has occured!___?????????????????',end='\n')
        print(err)
